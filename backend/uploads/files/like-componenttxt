import React, { useState, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { fetchLikesCount, likePost, unlikePost } from '../actions/userActions';

function LikeComponent({ uploadId }) {
  const dispatch = useDispatch();
  const { userInfo } = useSelector((state) => state.userLogin);
  const { likesCount, unlikesCount, loading, error } = useSelector((state) => state.LikeCount[uploadId] || { likesCount: 0, unlikesCount: 0, loading: false, error: null });

  // State to track button color
  const [buttonColor, setButtonColor] = useState(''); // '' for default color, 'blue' for liked, 'red' for unliked

  useEffect(() => {
    dispatch(fetchLikesCount(uploadId));
  }, [dispatch, uploadId]);

  // Effect to update button color based on likesCount and unlikesCount
  useEffect(() => {
    // Assuming likesCount and unlikesCount are integers representing the counts
    if (likesCount > unlikesCount) {
      setButtonColor('blue');
    } else if (unlikesCount > likesCount) {
      setButtonColor('red');
    } else {
      setButtonColor(''); // Default color
    }
  }, [likesCount, unlikesCount]);

  const handleLike = async () => {
    try {
      await dispatch(likePost(uploadId, userInfo.access_token));
      dispatch(fetchLikesCount(uploadId));
    } catch (error) {
      console.error("Error liking post:", error);
    }
  };
  
  const handleUnlike = async () => {
    try {
      await dispatch(unlikePost(uploadId, userInfo.access_token));
      dispatch(fetchLikesCount(uploadId));
    } catch (error) {
      console.error("Error unliking post:", error);
    }
  };

  const handleLikeClick = () => {
    if (buttonColor === 'blue') {
      setButtonColor('');
    } else {
      setButtonColor('blue');
    }
    handleLike();
  };

  const handleUnlikeClick = () => {
    if (buttonColor === 'red') {
      setButtonColor('');
    } else {
      setButtonColor('red');
    }
    handleUnlike();
  };

  if (loading) {
    return <div>Loading...</div>;
  }

  if (error) {
    return <div>Error: {error.message}</div>;
  }

  return (
    <div>
      <p>Likes: {likesCount}</p>
      <p>Unlikes: {unlikesCount}</p>
      <button onClick={handleLikeClick} style={{ backgroundColor: buttonColor === 'blue' ? 'blue' : '' }}>Like</button>
      <button onClick={handleUnlikeClick} style={{ backgroundColor: buttonColor === 'red' ? 'red' : '' }}>Unlike</button>
    </div>
  );
}

export default LikeComponent;